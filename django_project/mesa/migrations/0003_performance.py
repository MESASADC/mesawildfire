# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-04-05 11:22
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models



class Migration(migrations.Migration):
    

    dependencies = [
        ('mesa', '0002_alter_fdi_point'),
    ]

    operations = [

    migrations.RunSQL(
        sql = """

            DROP VIEW IF EXISTS mesa_fdigraphdata;
            DROP VIEW IF EXISTS firedanger_point_forecast_and_measured_current;
            DROP VIEW IF EXISTS firedanger_point_forecast_and_measured;
            DROP VIEW IF EXISTS firedanger_point_forecast;

            CREATE MATERIALIZED VIEW firedanger_point_forecast AS 
             SELECT DISTINCT ON (r.target_datetime, r.datetime, p.id, r.product) p.id AS point_id,
                p.name AS point_name,
                p.point,
                r.datetime AS source_date_time,
                r.target_datetime AS target_date_time,
                st_value(r.rast, p.point) AS value,
                r.product
               FROM lfdi_fwi_raster r,
                mesa_fdipoint p
              WHERE st_intersects(r.rast, p.point) AND r.target_datetime::date >= 'now'::text::date
              ORDER BY r.target_datetime, r.datetime DESC
            WITH DATA;

            ALTER TABLE firedanger_point_forecast
              OWNER TO docker;


            CREATE OR REPLACE VIEW firedanger_point_forecast_and_measured AS 
             SELECT forecast_and_measured.point_id,
                forecast_and_measured.point_name,
                forecast_and_measured.point,
                forecast_and_measured.source_date_time,
                forecast_and_measured.target_date_time,
                forecast_and_measured.value,
                forecast_and_measured.product,
                forecast_and_measured.value_class
               FROM (( SELECT pf.point_id,
                        pf.point_name,
                        pf.point,
                        pf.source_date_time,
                        pf.target_date_time,
                        pf.value,
                        pf.product,
                        'Forecast'::text AS value_class
                       FROM firedanger_point_forecast pf
                      WHERE pf.source_date_time = (( SELECT max(pf2.source_date_time) AS max
                               FROM firedanger_point_forecast pf2
                              WHERE pf.product::text = pf2.product::text))
                      ORDER BY pf.target_date_time)
                    UNION
                     SELECT fp.id AS point_id,
                        fp.name AS point_name,
                        fp.point,
                        fm.date_time AS source_date_time,
                        fm.date_time AS target_date_time,
                        fm.fdi_value AS value,
                        'lfdid'::character varying AS product,
                        'Actual'::text AS value_class
                       FROM mesa_fdimeasurement fm,
                        mesa_fdipoint fp
                      WHERE fm.fdi_point_id = fp.id) forecast_and_measured
              ORDER BY forecast_and_measured.point_id, forecast_and_measured.target_date_time;

            ALTER TABLE firedanger_point_forecast_and_measured
              OWNER TO docker;                         


            CREATE OR REPLACE VIEW mesa_fdigraphdata AS 
             SELECT (-1) AS id,
                firedanger_point_forecast_and_measured.point_id,
                firedanger_point_forecast_and_measured.point_name,
                firedanger_point_forecast_and_measured.target_date_time,
                firedanger_point_forecast_and_measured.value,
                firedanger_point_forecast_and_measured.value_class
               FROM firedanger_point_forecast_and_measured
              WHERE firedanger_point_forecast_and_measured.product::text = 'lfdid'::text
              ORDER BY firedanger_point_forecast_and_measured.point_id, firedanger_point_forecast_and_measured.target_date_time;

            ALTER TABLE mesa_fdigraphdata
              OWNER TO docker;


            CREATE OR REPLACE VIEW firedanger_point_forecast_and_measured_current AS 
             SELECT p.id AS point_id,
                p.name AS point_name,
                p.type AS point_type,
                p.point,
                data.source_date_time,
                data.target_date_time,
                data.value,
                data.product,
                data.value_class
               FROM mesa_fdipoint p
                 LEFT JOIN ( SELECT DISTINCT ON (firedanger_point_forecast_and_measured.point_id, firedanger_point_forecast_and_measured.product) firedanger_point_forecast_and_measured.point_id,
                        firedanger_point_forecast_and_measured.point_name,
                        firedanger_point_forecast_and_measured.point,
                        firedanger_point_forecast_and_measured.source_date_time,
                        firedanger_point_forecast_and_measured.target_date_time,
                        firedanger_point_forecast_and_measured.value,
                        firedanger_point_forecast_and_measured.product,
                        firedanger_point_forecast_and_measured.value_class
                       FROM firedanger_point_forecast_and_measured
                      WHERE (firedanger_point_forecast_and_measured.target_date_time + '01:00:00'::interval) > now()) data ON p.id = data.point_id;

            ALTER TABLE firedanger_point_forecast_and_measured_current
              OWNER TO docker;

            CREATE OR REPLACE FUNCTION refresh_firedanger_point_forecast()
              RETURNS trigger AS
            $BODY$
            BEGIN

            REFRESH MATERIALIZED VIEW firedanger_point_forecast;

            RETURN new;

            END
            $BODY$
              LANGUAGE plpgsql VOLATILE
              COST 100;
            ALTER FUNCTION refresh_firedanger_point_forecast()
              OWNER TO docker;     

            CREATE TRIGGER trigger_all_fdipoint
              AFTER INSERT OR UPDATE OR DELETE
              ON mesa_fdipoint
              FOR EACH ROW
              EXECUTE PROCEDURE refresh_firedanger_point_forecast();


            CREATE TRIGGER trigger_all_lfdi_fwi_raster
              AFTER INSERT OR UPDATE OR DELETE
              ON lfdi_fwi_raster
              FOR EACH ROW
              EXECUTE PROCEDURE refresh_firedanger_point_forecast(); 
              

                                  
        """,
        reverse_sql = """

            DROP VIEW IF EXISTS mesa_fdigraphdata;
            DROP VIEW IF EXISTS firedanger_point_forecast_and_measured_current;
            DROP VIEW IF EXISTS firedanger_point_forecast_and_measured;
            DROP MATERIALIZED VIEW IF EXISTS firedanger_point_forecast;

            CREATE OR REPLACE VIEW firedanger_point_forecast AS 
            
               SELECT DISTINCT ON (r.target_datetime, r.datetime, p.id, r.product) p.id AS point_id,
                  p.name AS point_name,
                  p.point,
                  r.datetime AS source_date_time,
                  r.target_datetime AS target_date_time,
                  st_value(r.rast, p.point) AS value,
                  r.product
                 FROM lfdi_fwi_raster r,
                  mesa_fdipoint p
                WHERE st_intersects(r.rast, p.point) AND r.target_datetime::date >= 'now'::text::date
                ORDER BY r.target_datetime, r.datetime DESC;

              ALTER TABLE firedanger_point_forecast
                OWNER TO docker;


            CREATE OR REPLACE VIEW firedanger_point_forecast_and_measured AS 
             SELECT forecast_and_measured.point_id,
                forecast_and_measured.point_name,
                forecast_and_measured.point,
                forecast_and_measured.source_date_time,
                forecast_and_measured.target_date_time,
                forecast_and_measured.value,
                forecast_and_measured.product,
                forecast_and_measured.value_class
               FROM (( SELECT pf.point_id,
                        pf.point_name,
                        pf.point,
                        pf.source_date_time,
                        pf.target_date_time,
                        pf.value,
                        pf.product,
                        'Forecast'::text AS value_class
                       FROM firedanger_point_forecast pf
                      WHERE pf.source_date_time = (( SELECT max(pf2.source_date_time) AS max
                               FROM firedanger_point_forecast pf2
                              WHERE pf.product::text = pf2.product::text))
                      ORDER BY pf.target_date_time)
                    UNION
                     SELECT fp.id AS point_id,
                        fp.name AS point_name,
                        fp.point,
                        fm.date_time AS source_date_time,
                        fm.date_time AS target_date_time,
                        fm.fdi_value AS value,
                        'lfdid'::character varying AS product,
                        'Actual'::text AS value_class
                       FROM mesa_fdimeasurement fm,
                        mesa_fdipoint fp
                      WHERE fm.fdi_point_id = fp.id) forecast_and_measured
              ORDER BY forecast_and_measured.point_id, forecast_and_measured.target_date_time;

            ALTER TABLE firedanger_point_forecast_and_measured
              OWNER TO docker;                         

            CREATE OR REPLACE VIEW mesa_fdigraphdata AS 
             SELECT (-1) AS id,
                firedanger_point_forecast_and_measured.point_id,
                firedanger_point_forecast_and_measured.point_name,
                firedanger_point_forecast_and_measured.target_date_time,
                firedanger_point_forecast_and_measured.value,
                firedanger_point_forecast_and_measured.value_class
               FROM firedanger_point_forecast_and_measured
              WHERE firedanger_point_forecast_and_measured.product::text = 'lfdid'::text
              ORDER BY firedanger_point_forecast_and_measured.point_id, firedanger_point_forecast_and_measured.target_date_time;

            ALTER TABLE mesa_fdigraphdata
              OWNER TO docker;


            CREATE OR REPLACE VIEW firedanger_point_forecast_and_measured_current AS 
             SELECT p.id AS point_id,
                p.name AS point_name,
                p.type AS point_type,
                p.point,
                data.source_date_time,
                data.target_date_time,
                data.value,
                data.product,
                data.value_class
               FROM mesa_fdipoint p
                 LEFT JOIN ( SELECT DISTINCT ON (firedanger_point_forecast_and_measured.point_id, firedanger_point_forecast_and_measured.product) firedanger_point_forecast_and_measured.point_id,
                        firedanger_point_forecast_and_measured.point_name,
                        firedanger_point_forecast_and_measured.point,
                        firedanger_point_forecast_and_measured.source_date_time,
                        firedanger_point_forecast_and_measured.target_date_time,
                        firedanger_point_forecast_and_measured.value,
                        firedanger_point_forecast_and_measured.product,
                        firedanger_point_forecast_and_measured.value_class
                       FROM firedanger_point_forecast_and_measured
                      WHERE (firedanger_point_forecast_and_measured.target_date_time + '01:00:00'::interval) > now()) data ON p.id = data.point_id;

            ALTER TABLE firedanger_point_forecast_and_measured_current
              OWNER TO docker;

            DROP TRIGGER trigger_all_fdipoint ON mesa_fdipoint;
            DROP TRIGGER trigger_all_lfdi_fwi_raster ON lfdi_fwi_raster;
            DROP FUNCTION refresh_firedanger_point_forecast();
            
            
        """,
    ),    

    ]
    

