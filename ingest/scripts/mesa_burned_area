#!/usr/bin/env python
# -*- coding: utf-8 -*-

from osgeo import gdal
import argparse
import numpy as np
import os
import sys
import logging
import psycopg2
import osgeo.ogr
import osgeo.osr
import datetime
from datetime import date

script_dir = os.path.dirname(sys.argv[0])
incron_dir = sys.argv[1]
incron_file = sys.argv[2]
incron_filepath = os.path.join(incron_dir, incron_file)
incron_event = sys.argv[3]

logfile = os.path.join(script_dir, 'error.log')
logging.basicConfig(filename=logfile,level=logging.DEBUG, format='%(asctime)s :: %(message)s')
logging.info(incron_filepath)

def readFile(filename):   
    ds = gdal.Open(filename, gdal.GA_ReadOnly)
    (X, deltaX, rotation, Y, rotation, deltaY) = ds.GetGeoTransform()
    proj = ds.GetProjection()
    geo = ds.GetGeoTransform()
    Nx = ds.RasterXSize
    Ny = ds.RasterYSize
    band = ds.GetRasterBand(1)
    ary = band.ReadAsArray().astype(np.float16)
    nodata = band.GetNoDataValue()
    stats = band.GetStatistics(True, True)
    shape = ary.shape 
    return ary, shape, proj, geo, nodata, stats

def WriteGeoTif(array,outname,shape1,proj1,geo1):       
    driver = gdal.GetDriverByName('GTiff')
    ds = driver.Create(outname,shape1[1],shape1[0],1,gdal.GDT_Float32,options=['COMPRESS=DEFLATE'])
    ds.SetGeoTransform(geo1)
    ds.SetProjection(proj1)
    ds.GetRasterBand(1).WriteArray(array)

def filter_outside_values(inputname,minV,maxV,outname):
    ary, shape, proj, geo, nodata, stats = readFile(inputname)
    out_aray = np.zeros(shape)
    idx = np.where(np.logical_and(ary>=minV,ary<=maxV))
    out_aray[idx] = ary[idx]
    WriteGeoTif(out_aray,outname,shape,proj,geo)

def polygonize(in_rasterfile,out_shapefile,where='DN!=0',out_src='EPSG:4326'):
    out_shapefile_temp = out_shapefile[:-4]+'_temp1.shp'
    os.system('gdal_polygonize.py {} -8 -q -f "ESRI Shapefile" {}'.format(in_rasterfile,out_shapefile_temp))
    select_string = 'ogr2ogr -where "{0}" -t_srs {1} {2} {3}'.format(where,out_src,out_shapefile,out_shapefile_temp)
    os.system(select_string)
    os.system('rm {}*'.format(out_shapefile_temp[:-3]))

def read_shapefile_to_list(shapefile,sensor,version,year):
    src_shapefile = osgeo.ogr.Open(shapefile)
    layer = src_shapefile.GetLayer(0)
    params_list = []
    for feature in layer:
        flag = feature.GetField('DN')
        geom = feature.GetGeometryRef()
        wkt = geom.ExportToWkt()
        date = datetime.datetime(int(year), 1, 1) + datetime.timedelta(int(flag) - 1)
        date = date.strftime('%Y-%m-%d')
        params = {
                   'flag':flag,
                   'the_geom':wkt,
                   'sensor':sensor,
                   'version':version,
                   'date':date
                 }
        params_list.append(params)
    params_list = tuple(params_list)
    return params_list

def load_wgs84shape2database(connection_dict,table,shapefile,sensor,version,year):
    
    params_list = read_shapefile_to_list(shapefile,sensor,version,year)
    connect_string = "user=%(user)s password=%(password)s host=%(host)s dbname=%(dbname)s application_name='landsat8_ba'" %connection_dict
    connection = psycopg2.connect(connect_string)
    cursor = connection.cursor()
    cursor.executemany("""INSERT INTO """+table+"""(burned_day,sensor,version,date,the_geom)
                       VALUES (%(flag)s,%(sensor)s,%(version)s,%(date)s::timestamp,st_multi(st_GeomFromText(%(the_geom)s,4326)))""",params_list)
    connection.commit()

if __name__=='__main__':
    
    outname_filterd = 'temporary.tif'
    out_shapefile = 'temporary.shp'

    inputname = incron_filepath
    dbtablename = "mesa_burned_area" 
    connection_dict = {
                       'user':'docker', 
                       'password':'docker',
                       'host':'localhost',
                       'dbname':'gis'
                      }

    filename_data = incron_file.split("_")
    min_max = filename_data[4].split(".")
    min=int(min_max[0][-3:])
    max=int(min_max[1][-3:])
    sensor = filename_data[2]
    version = filename_data[6].split(".")[0]
    year = min_max[0][:4]

    filter_outside_values(inputname,min,max,outname_filterd)
    polygonize(outname_filterd,out_shapefile)
    load_wgs84shape2database(connection_dict,dbtablename,out_shapefile,sensor,version,year)
    os.system('rm temporary.*')






