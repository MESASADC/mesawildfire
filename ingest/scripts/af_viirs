#!/usr/bin/env python
# -*- coding: utf-8 -*-


from jinja2 import Environment, FileSystemLoader;
import sys, os
import logging
from kombu import Connection, Exchange, Queue
import datetime
import json


def render_message_payload(template_dir, template_name, **kwargs):
    #logging.debug('Template variables: %s' % str(kwargs)) 
    loader = FileSystemLoader(template_dir);
    env = Environment(loader=loader);
    template = env.get_template(template_name);
    return template.render(**kwargs)

script_dir = os.path.dirname(sys.argv[0])
template_dir = os.path.join(script_dir, 'templates')
incron_dir = sys.argv[1]
incron_file = sys.argv[2]
incron_filepath = os.path.join(incron_dir, incron_file)
incron_event = sys.argv[3]

#logfile = os.path.join(script_dir, 'af_viirs.log')
logfile='/dev/stdout'
logging.basicConfig(filename=logfile,level=logging.DEBUG, format='%(asctime)s :: %(message)s')

configfile = os.path.join(script_dir, 'config.json')
config = json.loads(open(configfile).read())

uri = 'amqp://{amqp_user}:{amqp_pass}@{amqp_host}:{amqp_port}/{amqp_vhost}'.format(**config)

try:

    logging.info('Processing: {}/{} for {}'.format(incron_dir, incron_file, incron_event))
    logging.info('Trying to establish AMQP connectiion: %s' % uri)
    
    # Connect to rabbitmq server
    with Connection(uri) as conn:
        conn.connect()
        logging.info('Connection established: %s' % uri)
        exchange = Exchange(config['amqp_exchange'], type='topic', channel=conn.default_channel)
        exchange.declare()
        count = 0
        # FireLoc_npp_d20160207_t1325075_e1330490_b00001_c20160207134219914000_all-_dev.txt
        loc_d = incron_file.find('_d')
        YYYY_MM_DD = "{}-{}-{}".format(incron_file[loc_d+2:loc_d+6], incron_file[loc_d+6:loc_d+8], incron_file[loc_d+8:loc_d+10])
        loc_t = incron_file.find('_t')
        HH_MM_SS = "{}:{}:00".format(incron_file[loc_t+2:loc_t+4], incron_file[loc_t+4:loc_t+6])
        for line in open(incron_filepath):
            # Compose message payload 
            # https://wiki.afis.co.za/index.php?title=NPP_notes#DRL_Fireloc 
            lat, lon, bt13_k, scan, track, confidence, frp_mw = line.split(',')
            # hard coded area of interest
            if float(lat) > -30 or float(lat) < -31 or float(lon) < 27 or float(lon) > 30:
                logging.debug('Skip. (%s, %s) is outside AOI.' % (lon, lat)) 
                continue
            frp_mw = frp_mw.strip()
            body = render_message_payload(template_dir, "af_viirs_template.json", id='null', src='CSIR', lon=lon, lat=lat, btemp=bt13_k, frp=frp_mw, YYYY_MM_DD=YYYY_MM_DD, HH_MM_SS=HH_MM_SS, sat='NPP', confidence=confidence)
            logging.debug(body)
            # Publish message
            rk = 'af_viirs.geo.0.0.1.1'
            exchange.publish(body, rk)
            count += 1
            #logging.debug('Published a message with rk: %s' % rk)
        logging.info('Published %d af_viirs messages' % count)
    logging.info('Deleting succesfully processed file: %s' % incron_filepath)
    #os.remove(incron_filepath)
except:
    logging.exception('Failed to process: {}/{} for {}'.format(incron_dir, incron_file, incron_event))


os.system("%s/large_fire.sh" % script_dir)